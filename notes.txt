* Log into the appropriate admin node. 

* Build the container image:
cd /enablement/container-builder
docker build -t nginx:1.0 -t nginx:latest .
docker images

* Run the container 
docker run -d -p80:80 --name nginx nginx:latest
docker ps 

* Attach to the container
docker exec -it <container_id> /bin/sh

* Update the index.html  

* Rebuild the container 
docker build -t nginx:1.1 -t nginx:latest .
docker kill <existing_id>
docker rm nginx

docker run -d -p80:80 --name nginx nginx:latest
docker ps 

* Refresh webpage a few times
* Checks logs
docker logs <container_ID>

We now need to configure the remote container repository.
Each CSP has a slightly different way of doing this, but ultimately, we need
to enable authentication to the remote registry.

- We will use the GCP artifact registry service
- The easiest and most secure way to authenticate to the registry from docker is to 
use the gcloud credential helper.
- Gcloud is the GCP CLI and we'll use this to authenticate.
- Similar tools are available for AWS and Azure which work in similar ways.

gcloud auth configure-docker europe-west2-docker.pkg.dev

* Create the remote registry using CLI
gcloud artifacts repositories create --location europe-west2 --repository-format docker nginx-demo

* Tag the image with the remote registry details
docker tag nginx:1.1 europe-west2-docker.pkg.dev/k8s-enablement-0e0eb5f6/nginx-demo/nginx:1.1

* Push the image to the repository
docker push europe-west2-docker.pkg.dev/k8s-enablement-0e0eb5f6/nginx-demo/nginx:1.1

* OPTIONAL: Run the image from someone elses registry.
docker kill *ID*
docker rm *container_ID*
docker rmi *image_ids*

docker pull OR:
docker run -d -p 80:80 --name nginx europe-west2-docker.pkg.dev/k8s-enablement-0e0eb5f6/nginx-demo/nginx:1.1



Note: terraform destroy and remove artifact repositories manually - to cleanup






Create the kubernetes configuration by pulling the authentication details from gcloud 
gcloud container clusters list
gcloud container clusters get-credentials kubernetes-1 --region europe-west2

1. Create a container
2. Push container to container-registry



4. Deploy pod
5. Delete pod
8. Create Deployment
9. Create a service
10. Setup local scanner
11. Setup admission controller
12. Test admission controller


You need to test the creation of multiple admin nodes by running a terraform apply.
You then need to create a k8s autopilot cluster (or rather a number of them)


terraform output -raw admin_node_password

ssh to node and 

docker images
docker build -t nginx-demo .
/var/www/localhost/htdocs group www-data
docker run -d -p80:80 nginx:1.0 



