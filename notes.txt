* Log into the appropriate admin node. 

* Build the container image:
cd /enablement/container-builder
docker build -t nginx:1.0 -t nginx:latest .
docker images

* Run the container 
docker run -d -p80:80 --name nginx nginx:latest
docker ps 

* Check webpage

* Attach to the container
docker exec -it <container_id> /bin/sh

* Update the index.html  

* Rebuild the container 
docker build -t nginx:1.1 -t nginx:latest .
docker kill <existing_id>
docker rm nginx

docker run -d -p80:80 --name nginx nginx:latest
docker ps 

* Refresh webpage a few times
* Checks logs
docker logs <container_ID>

We now need to configure the remote container repository.
Each CSP has a slightly different way of doing this, but ultimately, we need
to enable authentication to the remote registry.

- We will use the GCP artifact registry service
- The easiest and most secure way to authenticate to the registry from docker is to 
use the gcloud credential helper.
- Gcloud is the GCP CLI and we'll use this to authenticate.
- Similar tools are available for AWS and Azure which work in similar ways.

* Create the remote registry using CLI
gcloud artifacts repositories create --location europe-west2 --repository-format docker nginx-demo

gcloud auth configure-docker europe-west2-docker.pkg.dev


* Tag the image with the remote registry details
docker tag nginx:latest europe-west2-docker.pkg.dev/k8s-enablement-0e0eb5f6/nginx-demo/nginx

* Push the image to the repository
docker push europe-west2-docker.pkg.dev/k8s-enablement-0e0eb5f6/nginx-demo/nginx

* OPTIONAL: Run the image from someone elses registry.
docker kill *ID*
docker rm *container_ID*
docker rmi *image_ids*

docker pull OR:
docker run -d -p 80:80 --name nginx europe-west2-docker.pkg.dev/k8s-enablement-0e0eb5f6/nginx-demo/nginx


-------

* Setup kubectl 
- gcloud container clusters get-credentials --region europe-west2 kubernetes-1

* Create a kubernetes namespace
kubectl get namespace - look at existing default namespaces
kubectl create namespace k8s-guru
kubectl get namespace

* Create a pod with our container
kubectl -n k8s-guru apply -f nginx-pod.yaml
kubectl -n k8s-guru get pods -o wide
kubectl -n k8s-guru describe pods nginx-pod

* Setup a port forward to view pod
kubectl -n k8s-guru port-forward pod/nginx-pod 8080:80 --address 0.0.0.0
- Now connect to admin node on 8080

* Retrieve the logs.
kubectl -n k8s-guru logs nginx-pod 

* Delete the pod
kubectl -n k8s-guru delete -f nginx-pod.yaml

* Create a Deployment
kubectl -n k8s-guru apply -f nginx-deployment.yaml
kubectl -b k8s-guru get deployment
kubectl -b k8s-guru get pods -o wide

* Create a service
kubectl -n k8s-guru apply -f nginx-service.yaml


Note: terraform destroy and remove artifact repositories manually - to cleanup


9. Create a service
10. Setup local scanner
11. Setup admission controller
12. Test admission controller




